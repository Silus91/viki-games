{"ast":null,"code":"import _defineProperty from \"/home/dawid/trening/tictac/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/dawid/trening/tictac/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/dawid/trening/tictac/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\n\nconst App = () => {\n  const WIN_CONDITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  const _useState = useState(true),\n        _useState2 = _slicedToArray(_useState, 2),\n        xPlaying = _useState2[0],\n        setXPlaying = _useState2[1];\n\n  const _useState3 = useState(Array(9).fill(null)),\n        _useState4 = _slicedToArray(_useState3, 2),\n        board = _useState4[0],\n        setBoard = _useState4[1];\n\n  const _useState5 = useState({\n    xScore: 0,\n    oScore: 0\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        scores = _useState6[0],\n        setScores = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        gameOver = _useState8[0],\n        setGameOver = _useState8[1];\n\n  const handleBoxClick = boxIdx => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"Voldi\" : \"Harry\";\n      } else {\n        return value;\n      }\n    });\n    setBoard(updatedBoard); // Step 2: Check if either player has won the game\n\n    const winner = checkWinner(updatedBoard);\n\n    if (winner) {\n      if (winner === \"Voldi\") {\n        let oScore = scores.oScore;\n        oScore += 1;\n        setScores(_objectSpread({}, scores, {\n          oScore\n        }));\n      } else {\n        let xScore = scores.xScore;\n        xScore += 1;\n        setScores(_objectSpread({}, scores, {\n          xScore\n        }));\n      }\n    } // Step 3: Change active player\n\n\n    setXPlaying(!xPlaying);\n  };\n\n  const checkWinner = board => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const _WIN_CONDITIONS$i = _slicedToArray(WIN_CONDITIONS[i], 3),\n            x = _WIN_CONDITIONS$i[0],\n            y = _WIN_CONDITIONS$i[1],\n            z = _WIN_CONDITIONS$i[2]; // Iterate through win conditions and check if either player satisfies them\n\n\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  };\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(ScoreBoard, {\n    scores: scores,\n    xPlaying: xPlaying,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(Board, {\n    board: board,\n    onClick: gameOver ? resetBoard : handleBoxClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(ResetButton, {\n    resetBoard: resetBoard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/dawid/trening/tictac/src/App.js"],"names":["React","useState","Board","ResetButton","ScoreBoard","App","WIN_CONDITIONS","xPlaying","setXPlaying","Array","fill","board","setBoard","xScore","oScore","scores","setScores","gameOver","setGameOver","handleBoxClick","boxIdx","updatedBoard","map","value","idx","winner","checkWinner","i","length","x","y","z","resetBoard"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport { Board } from \"./components/Board\";\nimport { ResetButton } from \"./components/ResetButton\";\nimport { ScoreBoard } from \"./components/ScoreBoard\";\nimport './App.css';\n\nconst App = () => {\n\n  const WIN_CONDITIONS = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ]\n\n  const [xPlaying, setXPlaying] = useState(true);\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [scores, setScores] = useState({ xScore: 0, oScore: 0 })\n  const [gameOver, setGameOver] = useState(false);\n\n  const handleBoxClick = (boxIdx) => {\n    // Step 1: Update the board\n    const updatedBoard = board.map((value, idx) => {\n      if (idx === boxIdx) {\n        return xPlaying ? \"Voldi\" : \"Harry\";\n      } else {\n        return value;\n      }\n    })\n\n    setBoard(updatedBoard);\n\n    // Step 2: Check if either player has won the game\n    const winner = checkWinner(updatedBoard);\n    if (winner) {\n      if (winner === \"Voldi\") {\n        let { oScore } = scores;\n        oScore += 1;\n        setScores({ ...scores, oScore })\n      } else {\n        let { xScore } = scores;\n        xScore += 1;\n        setScores({ ...scores, xScore })\n      }\n    }\n\n    // Step 3: Change active player\n    setXPlaying(!xPlaying);\n  }\n\n  const checkWinner = (board) => {\n    for (let i = 0; i < WIN_CONDITIONS.length; i++) {\n      const [x, y, z] = WIN_CONDITIONS[i];\n\n      // Iterate through win conditions and check if either player satisfies them\n      if (board[x] && board[x] === board[y] && board[y] === board[z]) {\n        setGameOver(true);\n        return board[x];\n      }\n    }\n  }\n\n  const resetBoard = () => {\n    setGameOver(false);\n    setBoard(Array(9).fill(null));\n  }\n\n  return (\n    <div className=\"App\">\n      <ScoreBoard scores={scores} xPlaying={xPlaying} />\n      <Board board={board} onClick={gameOver ? resetBoard : handleBoxClick} />\n      <ResetButton resetBoard={resetBoard} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}